generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db" //  直接使用 SQLite 檔案，不透過 .env
}

model User {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  email     String     @unique
  password  String
  phone     String
  role      Int
  patients  Patient[] // @relation("Maintainer")
  trackings Tracking[] @relation("UserTracking")
  owns      Own[] // ✅ 多對多關係連接 Own
  createdAt DateTime   @default(now())
}

model Patient {
  id                Int                @id @default(autoincrement())
  userId            Int
  //height            Float?
  //weight            Float?
  //disease           String?
  //allergies         String?
  vitalMeasurements VitalMeasurement[]
  alerts            Alert[]
  trackings         Tracking[]         @relation("PatientTracking")
  owns              Own[] // ✅ 多對多關係連接 Own
  name              String
  //patient_Id String 
  age               Int
  gender            String
  addr              String
  id_number         String             @unique
  nhCardNum         String
  emerName          String?
  emerPhone         String?
  info              String?
  isArchived        Boolean            @default(false)
  lastUpd           DateTime           @default(now())
  lastUpdId         Int
  User              User               @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VitalMeasurement {
  id          Int       @id @default(autoincrement())
  patientId   Int
  vitalTypeId Int
  value       Float
  notes       String?
  recordDate  DateTime
  recordTime  DateTime
  creatorId   Int
  alerts      Alert[]
  trigger     Trigger?
  vitalType   VitalType @relation(fields: [vitalTypeId], references: [id])
  patient     Patient   @relation(fields: [patientId], references: [id])
}

model VitalType {
  id           Int                @id @default(autoincrement())
  typeName     String             @unique
  unit         String
  upperBound   Float
  lowerBound   Float
  measurements VitalMeasurement[]
}

model Alert {
  id                 Int      @id @default(autoincrement())
  patientId          Int
  alertType          String
  alertMessage       String
  alertTime          DateTime
  vitalMeasurementId Int

  vitalMeasurement VitalMeasurement @relation(fields: [vitalMeasurementId], references: [id])
  patient          Patient          @relation(fields: [patientId], references: [id])
  trigger          Trigger?
}

model Trigger {
  id                 Int              @id @default(autoincrement())
  vitalMeasurementId Int              @unique
  alertId            Int              @unique
  alert              Alert            @relation(fields: [alertId], references: [id])
  vitalMeasurement   VitalMeasurement @relation(fields: [vitalMeasurementId], references: [id])
}

model Tracking {
  id              Int      @id @default(autoincrement())
  userId          Int
  patientId       Int
  roleId          Int
  role            Int // 0: caregiver, 1: family
  user            User     @relation("UserTracking", fields: [userId], references: [id])
  patient         Patient  @relation("PatientTracking", fields: [patientId], references: [id])
  permissionLevel Int // Permission level (1, 2, 3, etc.)
  createdAt       DateTime @default(now())
}

//model Tracking {
//id             String    @id @default(uuid())
//userId         String    // User (caregiver or family member)
//patientId      String    // Patient
//createdAt      DateTime  @default(now())

//role           Int       // 0: caregiver, 1: family
//patient        Patient   @relation(fields: [patientId], references: [id])
// Add relation to User model as well
//}

model Own {
  id        Int @id @default(autoincrement())
  userId    Int
  patientId Int

  user    User    @relation(fields: [userId], references: [id])
  patient Patient @relation(fields: [patientId], references: [id])

  @@unique([userId, patientId])
}
